#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <curl/curl.h>

typedef struct _Memory
{
    char *response;
    size_t size;
} Memory;

static size_t write_callback(void *data, size_t size, size_t nmemb, void *userp)
{
    /* to jest rzeczywista liczba bajtów przekazanych przez curl */
    size_t realsize = size * nmemb;

    /* jawnie konwertujemy (void*) na naszą strukturę, bo wiemy, że będziemy ją tutaj otrzymywać */
    Memory *mem = (Memory *) userp;

    char *ptr = NULL;

    /* Sprawdzamy czy pierwszy raz wywołujemy funkcję i trzeba zaalokować pamięć po raz pierwszy,
    czy trzeba zrobić reallokację (która kopiuje automatycznie starą zawartość w nowe miejsce) */
    if (mem->response != NULL)
        ptr = realloc(mem->response, mem->size + realsize + 1);
    else
        ptr = malloc(mem->size + realsize + 1);

    if (ptr == NULL)
        return 0; /* brak pamięci! */

    /* teraz zapamiętujemy nowy wskaźnik i doklejamy na końcu dane przekazane przez curl w 
       obszarze pamięci wskazywanym przez data */
    mem->response = ptr;
    memcpy(&(mem->response[mem->size]), data, realsize);
    mem->size += realsize;
    mem->response[mem->size] = 0; // to na końcu dodajemy bo to w końcu string, i zawsze powinien się skończyć!

    return realsize;
}

char * make_request(char *url)
{
    CURL *curl;
    CURLcode res;
    Memory chunk;
    chunk.size = 0;
    chunk.response = NULL;

    curl = curl_easy_init();
    if (curl)
    {
        curl_easy_setopt(curl, CURLOPT_URL, url);
        curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);
        curl_easy_setopt(curl, CURLOPT_HEADER, 1L);

        /* to jest funkcja 'callback', która będzie wywołana przez curl gdy odczyta on kawałek danych
       ta funkcja musi mieć wywołanie zgodne z wymaganiami, które możesz sprawdzić tutaj:
       https://curl.se/libcurl/c/CURLOPT_WRITEFUNCTION.html */
        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_callback);

        /* to jest adress struktury, który będzie przekazywany do naszej funkcji 'callback',
       do tej struktury nasz funkcja 'callback' będzie dopisywać wynik */
        curl_easy_setopt(curl, CURLOPT_WRITEDATA, (void *)&chunk);

        /* Wykonaj zapytanie 'synchronicznie', to znaczy następna linijka kodu nie wykona się
       dopóki nie nadejdzie odpowiedź z serwera. */
        res = curl_easy_perform(curl);

        /* Sprawdzamy czy wystapił jakis błąd? */
        if (res != CURLE_OK)
            fprintf(stderr, "Błąd! curl_easy_perform() niepowodzenie: %s\n", curl_easy_strerror(res));
        else
        {
            printf("%s", chunk.response);
        }

        /* zawsze po sobie sprzątaj */
        free(chunk.response);
        curl_easy_cleanup(curl);
    }
}
int info(char *token) {
    
    // http://edi.iem.pw.edu.pl:30000/worlds/api/v1/worlds/info/token
    char *url = (char*)malloc(sizeof(char*));
    strcpy(url,"http://edi.iem.pw.edu.pl:30000/worlds/api/v1/worlds/info");
    strcat(url,"/");
    strcat(url,token);
    make_request(url);
    free(url);
    return 0;
}

int move(char *token) {
    // http://edi.iem.pw.edu.pl:30000/worlds/api/v1/worlds/move/token
    char *url = (char*)malloc(sizeof(char*));
    strcpy(url,"http://edi.iem.pw.edu.pl:30000/worlds/api/v1/worlds/move");
    strcat(url,"/");
    strcat(url,token);
    make_request(url);
    free(url);
    return 0;
}

int rotate(char *token, char *direction)
{
    // http://edi.iem.pw.edu.pl:30000/worlds/api/v1/worlds/rotate/token/direction
    char *url = (char*)malloc(sizeof(char*));
    strcpy(url,"http://edi.iem.pw.edu.pl:30000/worlds/api/v1/worlds/rotate");
    strcat(url,"/");
    strcat(url,token);
    strcat(url,"/");
    strcat(url,direction);
    make_request(url);
    free(url);
    return 0;
}

int main(int argc, char **argv)
{
    char *swiat=(char*)malloc(sizeof(char*));
    strcpy(swiat,"qwerty_12");
    // char *url;
    if (argc==1)
    {
        printf("podaj operacje!\n");
        printf("Move - \"M\"; Rotate - \"Rr/Rl\"; Info - \"info\"\n");
    }
    for (int i=1;i<argc;i++)
    {
        if(strcmp(argv[i],"M")==0)
        move(swiat);
        else if(strcmp(argv[i],"Rr")==0)
        rotate(swiat,"right");
        else if(strcmp(argv[i],"Rl")==0)
        rotate(swiat,"left");
        else if(strcmp(argv[i],"info")==0)
        info(swiat);
        else
        {
        printf("podaj operacje!\n");
        printf("Move - \"M\"; Rotate - \"Rr/Rl\"; Info - \"info\"\n");
        }
    }
    // char *url = argc < 2 ? "http://edi.iem.pw.edu.pl:30000/worlds/api/v1/worlds/info/qwerty_12" : argv[1];
    
    return 0;
}
/*
------------UBUNTU-------------
COS JEST NIE TAK - przy większej liczbie argumentów segmentation fault, a przy 1 argumentcie(argc=2), wyrzuca jakieś dziwne komunikaty
???
kapustekk@LAPTOP-TJ4HHN2K:/mnt/c/programowanie/1DM1103_20Z/sem11$ ./a.out M
HTTP/1.0 200 OK
Content-Type: application/json
Content-Length: 200
Access-Control-Allow-Origin: *
Server: Werkzeug/1.0.1 Python/3.6.9
Date: Sun, 20 Dec 2020 18:21:46 GMT

{"status": "Success", "payload": {"name": "First world 12", "current_x": 7, "current_y": 1, "current_session": "pierwsza_12", "direction": "S", "step": 619, "field_type": "grass", "field_bonus": ""}}
munmap_chunk(): invalid pointer //wyrzuca przy braku free(url); w funkcji ruchu!
Aborted (core dumped)
kapustekk@LAPTOP-TJ4HHN2K:/mnt/c/programowanie/1DM1103_20Z/sem11$ ./a.out Rr
HTTP/1.0 200 OK
Content-Type: application/json
Content-Length: 200
Access-Control-Allow-Origin: *
Server: Werkzeug/1.0.1 Python/3.6.9
Date: Sun, 20 Dec 2020 18:21:52 GMT

{"status": "Success", "payload": {"name": "First world 12", "current_x": 7, "current_y": 1, "current_session": "pierwsza_12", "direction": "W", "step": 620, "field_type": "grass", "field_bonus": ""}}
free(): invalid next size (fast) //wyrzuca gdy free(url) jest w funkcji ruchu
Aborted (core dumped)
kapustekk@LAPTOP-TJ4HHN2K:/mnt/c/programowanie/1DM1103_20Z/sem11$ ./a.out M
HTTP/1.0 200 OK
Content-Type: application/json
Content-Length: 200
Access-Control-Allow-Origin: *
Server: Werkzeug/1.0.1 Python/3.6.9
Date: Sun, 20 Dec 2020 18:22:04 GMT

{"status": "Success", "payload": {"name": "First world 12", "current_x": 6, "current_y": 1, "current_session": "pierwsza_12", "direction": "W", "step": 621, "field_type": "grass", "field_bonus": ""}}
munmap_chunk(): invalid pointer
Aborted (core dumped)
kapustekk@LAPTOP-TJ4HHN2K:/mnt/c/programowanie/1DM1103_20Z/sem11$ ./a.out M
HTTP/1.0 200 OK
Content-Type: application/json
Content-Length: 200
Access-Control-Allow-Origin: *
Server: Werkzeug/1.0.1 Python/3.6.9
Date: Sun, 20 Dec 2020 18:22:06 GMT

{"status": "Success", "payload": {"name": "First world 12", "current_x": 6, "current_y": 1, "current_session": "pierwsza_12", "direction": "W", "step": 622, "field_type": "grass", "field_bonus": ""}}
munmap_chunk(): invalid pointer
Aborted (core dumped)
kapustekk@LAPTOP-TJ4HHN2K:/mnt/c/programowanie/1DM1103_20Z/sem11$ ./a.out Rr
HTTP/1.0 200 OK
Content-Type: application/json
Content-Length: 200
Access-Control-Allow-Origin: *
Server: Werkzeug/1.0.1 Python/3.6.9
Date: Sun, 20 Dec 2020 18:22:11 GMT

{"status": "Success", "payload": {"name": "First world 12", "current_x": 6, "current_y": 1, "current_session": "pierwsza_12", "direction": "N", "step": 623, "field_type": "grass", "field_bonus": ""}}
free(): invalid next size (fast)
Aborted (core dumped)
kapustekk@LAPTOP-TJ4HHN2K:/mnt/c/programowanie/1DM1103_20Z/sem11$ ./a.out M
HTTP/1.0 200 OK
Content-Type: application/json
Content-Length: 200
Access-Control-Allow-Origin: *
Server: Werkzeug/1.0.1 Python/3.6.9
Date: Sun, 20 Dec 2020 18:22:13 GMT

{"status": "Success", "payload": {"name": "First world 12", "current_x": 6, "current_y": 2, "current_session": "pierwsza_12", "direction": "N", "step": 624, "field_type": "grass", "field_bonus": ""}}
munmap_chunk(): invalid pointer
Aborted (core dumped)
kapustekk@LAPTOP-TJ4HHN2K:/mnt/c/programowanie/1DM1103_20Z/sem11$ ./a.out M
HTTP/1.0 200 OK
Content-Type: application/json
Content-Length: 199
Access-Control-Allow-Origin: *
Server: Werkzeug/1.0.1 Python/3.6.9
Date: Sun, 20 Dec 2020 18:22:15 GMT

{"status": "Success", "payload": {"name": "First world 12", "current_x": 6, "current_y": 3, "current_session": "pierwsza_12", "direction": "N", "step": 627, "field_type": "sand", "field_bonus": ""}}
munmap_chunk(): invalid pointer
Aborted (core dumped)
kapustekk@LAPTOP-TJ4HHN2K:/mnt/c/programowanie/1DM1103_20Z/sem11$ ./a.out M
HTTP/1.0 200 OK
Content-Type: application/json
Content-Length: 200
Access-Control-Allow-Origin: *
Server: Werkzeug/1.0.1 Python/3.6.9
Date: Sun, 20 Dec 2020 18:22:16 GMT

{"status": "Success", "payload": {"name": "First world 12", "current_x": 6, "current_y": 4, "current_session": "pierwsza_12", "direction": "N", "step": 628, "field_type": "grass", "field_bonus": ""}}
munmap_chunk(): invalid pointer
Aborted (core dumped)
kapustekk@LAPTOP-TJ4HHN2K:/mnt/c/programowanie/1DM1103_20Z/sem11$ ./a.out M
HTTP/1.0 200 OK
Content-Type: application/json
Content-Length: 200
Access-Control-Allow-Origin: *
Server: Werkzeug/1.0.1 Python/3.6.9
Date: Sun, 20 Dec 2020 18:22:18 GMT

{"status": "Success", "payload": {"name": "First world 12", "current_x": 6, "current_y": 5, "current_session": "pierwsza_12", "direction": "N", "step": 629, "field_type": "grass", "field_bonus": ""}}
munmap_chunk(): invalid pointer
Aborted (core dumped)
*/